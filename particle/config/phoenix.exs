use Mix.Config

# Configures the endpoint
config :particle, ParticleWeb.Endpoint,
  url: [host: "localhost"],
  secret_key_base: "dglKVKL1TcO4MifvgqofEU19CBvnBA+iEy896hrfy0c+n+f5XaYPzofdpw5Fl9Br",
  render_errors: [view: ParticleWeb.ErrorView, accepts: ~w(html json)],
  pubsub: [name: Particle.PubSub, adapter: Phoenix.PubSub.PG2],
  # The session will be stored in the cookie and signed,
  # this means its contents can be read but not tampered with.
  # Set :encryption_salt if you would also like to encrypt it.
  session_opts: [store: :cookie, key: "_particle_key", signing_salt: "TZk+t3cB"]

case Mix.env() do
  :dev ->
    # For development, we disable any cache and enable
    # debugging and code reloading.
    #
    # The watchers configuration can be used to run external
    # watchers to your application. For example, for compiling the frontend.
    config :particle, ParticleWeb.Endpoint,
      http: [port: 4000],
      debug_errors: true,
      code_reloader: true,
      check_origin: false,
      watchers: [
        yarn: ["bsb-watch", cd: Path.expand("../assets", __DIR__)],
        yarn: ["webpack-watch", cd: Path.expand("../assets", __DIR__)]
      ]

    # ## SSL Support
    #
    # In order to use HTTPS in development, a self-signed
    # certificate can be generated by running the following
    # command from your terminal:
    #
    #     openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -keyout priv/server.key -out priv/server.pem
    #
    # The `http:` config above can be replaced with:
    #
    #     https: [port: 4000, keyfile: "priv/server.key", certfile: "priv/server.pem"],
    #
    # If desired, both `http:` and `https:` keys can be
    # configured to run both http and https servers on
    # different ports.

    # Watch static and templates for browser reloading.
    config :particle, ParticleWeb.Endpoint,
      live_reload: [
        patterns: [
          ~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},
          ~r{priv/gettext/.*(po)$},
          ~r{lib/particle_web/views/.*(ex)$},
          ~r{lib/particle_web/templates/.*(eex)$}
        ]
      ]

    # Set a higher stacktrace during development. Avoid configuring such
    # in production as building large stacktraces may be expensive.
    config :phoenix, :stacktrace_depth, 20

  :test ->
    # We don't run a server during test. If one is required,
    # you can enable the server option below.
    config :particle, ParticleWeb.Endpoint,
      http: [port: 4001],
      server: false

  :prod ->
    # For production, we often load configuration from external
    # sources, such as your system environment. For this reason,
    # you won't find the :http configuration below, but set inside
    # ParticleWeb.Endpoint.init/2 when load_from_system_env is
    # true. Any dynamic configuration should be done there.
    #
    # Don't forget to configure the url host to something meaningful,
    # Phoenix uses this information when generating URLs.
    #
    # Finally, we also include the path to a cache manifest
    # containing the digested version of static files. This
    # manifest is generated by the mix phx.digest task
    # which you typically run after static files are built.
    config :particle, ParticleWeb.Endpoint,
      load_from_system_env: true,
      # TODO: URLs!
      url: [host: "example.com", port: 80],
      cache_static_manifest: "priv/static/cache_manifest.json"

    # ## SSL Support
    #
    # To get SSL working, you will need to add the `https` key
    # to the previous section and set your `:url` port to 443:
    #
    #     config :particle, ParticleWeb.Endpoint,
    #       ...
    #       url: [host: "example.com", port: 443],
    #       https: [:inet6,
    #               port: 443,
    #               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
    #               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
    #
    # Where those two env variables return an absolute path to
    # the key and cert in disk or a relative path inside priv,
    # for example "priv/ssl/server.key".
    #
    # We also recommend setting `force_ssl`, ensuring no data is
    # ever sent via http, always redirecting to https:
    #
    #     config :particle, ParticleWeb.Endpoint,
    #       force_ssl: [hsts: true]
    #
    # Check `Plug.SSL` for all available options in `force_ssl`.

    # ## Using releases
    #
    # If you are doing OTP releases, you need to instruct Phoenix
    # to start the server for all endpoints:
    #
    config :phoenix, :serve_endpoints, true
    #
    # Alternatively, you can configure exactly which server to
    # start per endpoint:
    #
    #     config :particle, ParticleWeb.Endpoint, server: true
    #
end
